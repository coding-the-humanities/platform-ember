{"posts": [{
  "title": "Blurred Lines",
  "posted": "2013-12-11T21:57:27.000Z",
  "authors": [
    "Charlotte van Oostrum"
  ],
  "order": 6,
  "topImage": {
    "url": "./images/blurred-lines.jpg"
  },
  "bottomImage": {
    "url": "./images/blurred-lines.jpg"
  },
  "tags": [
    "frontpage"
  ],
  "content": "## Blurred Lines: Literary Perspectives on Programming Languages\n\nI remember the day when I drew that first line on the screen of my computer using a command something like < line (x,y) >. I clicked \"run\" and indeed a line appeared. I had interacted with a machine that I'd formerly though of as both an enabled typewriter and a black box at the same time. I learned that my computer and I were capable of much more than text processing. \n\nWhen I clicked run that day, something clicked within me too: I realised that programming and markup languages are just another type of language, only slightly different from those I'd been using my entire life. Treating programming languages as languages made them accessible to me. Yet, computer languages seemed much more able to eliminate ambiguity and appeared to be always performative.\n\n### The Story World of Programming Languages\nPerformatives, and its counterpart constatives, is a distinction made by John Austin in his 1962 work *How to Do Things with Words*. Constatives, Austin argues, are locutions (utterances) that say something about a state of affairs and can be either true or false. Performatives are locutions that accomplish something. \n\nLiterature (neglected by Austin) can be considered a prime example of performative language: it brings into being a new reality–characters, places, actions. Programming languages do the same. Javascript creates a space (a world) where *var a = 5* changes the meaning of *a* from nothing or something else to *5* and Ruby allows for a space in which objects are made of text. These variables and objects (actors) play a role in the further development (actions) of the program (the story). \n\nOf interest here specifically is a certain type of performatives: the explicit performative. The explicit performative is an act of speech (the overarching theory of performatives, constatives, locutions, and so on is called speech-act theory) that brings about a change in the state of reality. For example the sentence \"I hereby pronounce you husband and wife.\" It needs to be pronounced by a certain institution and under certain conditions. Yet, if the context is right, a set of words changes reality. Methods–a programming procedure that accesses an object in object oriented programming languages–can utter the programming equivalent of \"I hereby pronounce you to …\" and change the state or function of the object altogether.\n\nA closer look turns out that not every locution in programming languages is a performative. Booleans–formulas that are return either a true or false–are a great example of a constative (a locution that says something about a state of affairs and can be either true or false). The story world of programming languages turns out to be as much a linguistic treasure as literature and human language are.\n\n### The Humanness of Speech\n\nIn literary criticism, ever since William Epson published his *Seven Types of Ambiguity* in 1930, ambiguity is considered a poetic device. If used properly, ambiguity adds to the complexity of the text as well as the experience of the reader. Poetry and literature turn ambiguity into a sign of quality rather than an flaw, as it was and is still often regarded in human communication.\n\nIn programming languages, as in human language, ambiguity appears as something that should be avoided–a typo or simply omitting a semi-colon at the end of a sentence quickly results in an error message. It seems that if you want a software program to run properly, everything to the tiniest detail has to be in control. However, second look at programming languages reveals that ambiguity is inherent in programming languages as in human language. While the so-called [diamond problem](http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem), causes programmers to seek ways to solve or avoid its ambiguity, game programmers are utterly comfortable with evoking spaces where ambiguity runs rampant.  \n\nWhere computer programs become more and more complex and try to build increasingly complex forms of artificial intelligence, ambiguity seems to be more and more a prerequisite rather than an inconvenience. Human communication, despite how much we’d want it to, is never free of ambiguity. As literature has taught us, this is its beauty rather than fault. Subsequently, for a program to approach humanness as closely as possible, it has to embrace ambiguity and embrace its possibilities.\n\n### To a Shared Language\nAllowing for ambiguity, however, entails opening up your artificial universe for unexpectedness, uncertainty and the potential of failure. Or as Nishant writes, this act diminishes the amount of control we can exert over these worlds:\n\n>A software program is really a rudimentary representation of reality with many axes of complexity reduced or entirely collapsed. The ability of programming languages to cut through ambiguity is actually a symptom of our own rudimentary understanding of the universe. We think that the ability of programming languages to eliminate ambiguity is a desirable feature (rather than a bug) because as humans we need to tell ourselves that we have some control of our environment.\n\nYet, the simple and deterministic programming culture of today is being replaced by more organic systems. Newer programming languages more closely resemble the way in which natural language works. The more natural the programs running our machines become, the less artificial they’ll feel. And the more room programming languages bear for ambiguity and complexity, the more they’re and our vocabulary to represent reality increases. \n\nAt first, human interaction had to be stripped down to its bare essentials in order for artificial intelligence and computer science to enact humanity in machines. Yet, today we’ve mastered the essentials and can add the complexities to it that make it human. We are ready to step away from software programs as the ideal and controlled versions of reality to machines that allow for complexity and the inevitability of uncertainty. The lines are blurred already. We should get ready for them to disappear. \n\n&mdash; Charlotte van Oostrum ([@cevoostrum](https://www.linkedin.com/in/cevoostrum))\n\n*With thanks to Nishant \"[@Rainypixels](http://rainypixels.com/)\" Kothary, for filling in the gaps in my knowledge of programming languages and being an inspiring and insighful writing partner*\n"
},{
  "title": "From Building to Testing",
  "posted": "2014-02-06T20:23:12.000Z",
  "authors": [
    "Charlotte van Oostrum",
    "Marijn Koolen"
  ],
  "order": 3,
  "topImage": {
    "url": "./images/ashley.jpg"
  },
  "bottomImage": "url ./images/nigel.jpg",
  "tags": [
    "frontpage"
  ],
  "content": "## From Building to Testing\n\nIs it possible to build a viable MVP in 2,5 weeks without any prior programming experience? Yes, it is, the pilot group of Coding the Humanities proved this week.\n\n### Learning the Basics\n\nThe week started with a lecture on JavaScript fundamentals, where the students learned the ins and outs of variables, loops, functions and scope, as well as some tips and tricks on how to debug their code. Jan Hein did a few pair programming sessions with students to demonstrate the importance communication and collaboration in programming. \n\nWith these new skills they could jump the last hurdles of their projects. When we left on Tuesday evening, the hurdles still seemed quite big, yet on Wednesday morning everything suddenly clicked! With the house metaphor project finished, a short video was made to present their first product.\n\n### Testing your Basics\n\nThis week, [Ashley Williams](http://heyashleyashley.com/) of [Bocoup](http://bocoup.com/), an Open Web development group in Boston, joined the Coding the Humanities project for a few workshops about learning programming. Just as the students (and most of the teachers) in the pilot, Ashley comes from a humanities background. The students worked through several assignments with her on test-driven development and modelling [Conway's Game of Life](http://en.wikipedia.org/wiki/Conway's_Game_of_Life).\n\n### To Program is to Master Abstraction\n\nThe weekly open event on Thursday started with a presentation of the project the students had finished earlier in the week, which spontaneously evolved in a long presentation and discussion of their new project which aims to tie the Dutch open government data sets into their previous project exploring the house metaphor.\n\nAfter the break, Ashley Williams talked about abstraction being one of the main hurdles to learning programming. She argued that lower-level languages can be easier to learn because they abstract away fewer things and are more explicit. \n\nOn Friday Lex Slaghuis and Arjan El Fassed of the [Open State Foundation](http://openstate.eu/) presented the many projects they run on hacking open government data.\n"
},{
  "title": "Making Games from Data",
  "posted": "2014-02-06T20:23:12.000Z",
  "authors": [
    "Charlotte van Oostrum",
    "Sabrina Sauer"
  ],
  "order": 9,
  "topImage": {
    "url": "./images/federico.jpg"
  },
  "bottomImage": {
    "url": "./images/presentation.jpg"
  },
  "tags": [
    "frontpage"
  ],
  "content": "## Making Games from Data\n\n\"We want to take quantitative data and turn our papers into computer games that convey the theory,\" sounded the conclusion of the last presentation on last week's Coding the Humanities opening event. \n\nBut how can we turn theory into quantitative data? And what do you need to make a computer game? This week, we turned from the smaller group projects of week one to a large, collaborative project and started making a game. \n\n### Translating Data into Different Guises\n\nDuring the first half of the week, Marijn, Jan Hein and Alexandro Mancusi from [Weyeser](http://weyeser.com/) gave introductions to API's, data sets, user stories, Json, Rest, Git and Firebase after which the students explored the tools themselves. \n\nOn Thursday, after a few days of technological immersion, Federico Bonelli of [Trasformatorio](http://www.trasformatorio.net/) reintroduced theory into data science and presented his work and ideas on interdisciplinary, truth and poetic terrorism. He showed how data can be translated and transformed into different guises. \n\n### Presenting Complex Issues\n\nOn Thursday evening, during the weekly open event, the students presented their collective work. They created a visualisation using mock data via Firebase, which they'd collected using a Facebook authentication system, and used words such as \"two way data binding\" without flinching. That's how far they've come already!\n\nAfter the presentation, there was extensive room for feedback. We talked about how you present an issue in a clear manner, without hiding what complex questions this issue brings to the fore when you explore it. \n\n### Pitching your Ideas\n\nFriday started with an impromptu lecture in project management by [Nigel Hamlin](http://nl.linkedin.com/in/nigelhamlin\n). We worked on practical project management skills and worked on preparing a five minute pitch for the project. Next week, we'll film the pitch and make it available on the website.\n\nWe ended the week with a pair programming session after which the students were invited to do some live coding. And this amazing week ended even better with the amazing Dutch victory at their first World Cup game!\n"
},{
  "title": "Starting Full Blast",
  "authors": [
    "Charlotte van Oostrum"
  ],
  "posted": "2014-02-06T20:23:12.000Z",
  "order": 12,
  "topImage": {
    "url": "./images/students-window.jpg"
  },
  "bottomImage": {
    "url": "./images/launch-event.jpg"
  },
  "tags": [
    "frontpage"
  ],
  "content": "## Starting Full Blast\nAfter a short first meeting of the Coding the Humanities crew on Monday evening in the home-from-home in the pilot space, the actual programme started full blast on Tuesday morning. \n\nAs a short warm up, the students divided into small groups to briefly discuss their favourite websites. One would talk about their site, while the others would note down keywords, an image associated with the story and a slogan. After this, the students translated these stories into a HTML format and added CSS styling. At the end of the day, they presented their results.\n\n###The First Projects\nOn Wednesday morning, the group began the day with a \"stand up\"; in three groups they discussed how they had experienced the first day, was it tough, did they learn much, what issues did they run in to? The assignment for the morning consisted of working on developing webpages, in mock-up, related to three humanities’ themes or topics: \"Power in the museum\", \"Identity and the selfie\" en \"Rhythms as a tool”. \n\nWorking collaboratively, they developed posters, which were presented to the larger group. After the break, each group actually developed the ideas on their posters by creating a page, after which – using github, the pages were shared, so that each could work on the page of another group. The day ended with a lecture about webcomponents.\n\n###What is Data in the Humanities?\nAfter the stand up on Thursday morning, guest speaker Jan Willem Tulp of [Tulp Interactive](http://tulpinteractive.com/) gave a lecture about data visualisation, after which the students worked on the question on what data is in the different humanities; what would you consider to be data, how would you problematize data and how would you be able to translate this into a webcomponent? \n\nUsing an actual project, paper or idea as a starting point, ideas were sketched on posters. The ideas of the students were very diverse; finding a common ground to discuss \"data\", and translating this into a visualization resulted in three designs.\n\n###The First Presentations\nThe day ended with an open event, where visitors and students could listen to short presentations by the Coding the Humanities team, the poster presentations of the students and share a drink and pizza.\n"
}]}